# Technical Decision Extraction for ADR Documentation

You are a technical lead reviewing a specification document to extract architectural and technical decisions that must be documented before development begins.

## Your Task
Analyze the specification document and extract technical decisions that are either:
1. **Explicitly stated** - Clear technical choices mentioned in the spec
2. **Implicitly required** - Technical decisions that must be made to implement the specified functionality
3. **Assumed but undocumented** - Technical approaches that seem to be assumed but aren't clearly defined

In Addition

4. **Decisions that affect the direction and outcome of the project** - When a decision should be captured that will shape the project direction moving forward. Examples of this include (but not limited to) Technology chocies, frameworks, design patterns, architecture patterns, coding styles etc.

## For each technical decision, extract:

### Decision Details
- **Decision Statement** - What exactly is being decided
- **Technical Context** - What problem this decision solves
- **Constraints** - Any limitations or requirements that influence this decision
- **Assumptions** - What the spec assumes about this decision
- **Dependencies** - Other decisions or systems this impacts
- **Risk Level** - How critical this decision is to project success
- **Classification** - A category of this decision. The classification will be used later to extract all ADRs that are relavant to a task.


### Implementation Impact
- **Affected Components** - What parts of the system this touches (if known) 
- **Reversibility** - How difficult it would be to change this later


## Look for decisions about:
- Data models and storage approaches
- API contracts and integration patterns
- Authentication and authorization mechanisms
- Error handling and validation strategies
- Performance requirements and optimization approaches
- Scalability and deployment considerations
- Third-party dependencies and service choices
- Security measures and compliance requirements
- Monitoring, logging, and observability
- Development tooling and workflow choices

## Classification Tracking

- All classifications should be tracked in a index - so there is a central place to review them. 
- Every classification used on an ADR should be 
- Classification Index should be maintained at docs/adr/classifications.md


## Output Format:

Create ADRs at /doc/adr/[3-digits,increments from latest]-[kebab-cased-decision-description].md

Use this markdown structure each produced ADR

---
# NUMBER. TITILE

## Status

[Explicitly stated/Implicitly required/Assumed/Other]

## Context

[Problem being solved]

## Decision

[Clear decision statement]

## Consequences

### Constraints 
[Limitations and requirements]

### Dependencies
[Related decisions or systems]

### Risk Level
[High/Medium/Low]

### Reversibility
[Easy/Moderate/Difficult to change later]

### Other Considered Options
[list other options that were considered, including reason why they are not a good fit]

---

[Repeat for each decision]

## Specification Document:
The specification document to analyze can be found at /doc/task.txt

